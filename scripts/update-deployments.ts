/**
 * Automatically updates src/lib/deployments.ts from Foundry broadcast files
 * Reads broadcast run-latest.json files and extracts deployment addresses
 */

import * as fs from 'fs';
import * as path from 'path';

interface Transaction {
  contractName: string;
  contractAddress: string;
  function?: string;
  arguments?: any[];
}

interface BroadcastFile {
  transactions: Transaction[];
  chain: number;
}

interface ChainDeployments {
  SafeModuleManager?: string;
  ManagedSafeModule?: string;
}

const BROADCAST_DIR = path.join(process.cwd(), 'broadcast');
const OUTPUT_FILE = path.join(process.cwd(), 'src/lib/deployments.ts');

function findBroadcastFiles(): Array<{ path: string; chainId: number }> {
  const files: Array<{ path: string; chainId: number }> = [];

  // Look for all run-latest.json files in broadcast directory
  const scriptDirs = fs.readdirSync(BROADCAST_DIR);

  for (const scriptDir of scriptDirs) {
    const scriptPath = path.join(BROADCAST_DIR, scriptDir);
    if (!fs.statSync(scriptPath).isDirectory()) continue;

    const chainDirs = fs.readdirSync(scriptPath);
    for (const chainDir of chainDirs) {
      const chainPath = path.join(scriptPath, chainDir);
      if (!fs.statSync(chainPath).isDirectory()) continue;

      const runLatestPath = path.join(chainPath, 'run-latest.json');
      if (fs.existsSync(runLatestPath)) {
        const chainId = parseInt(chainDir, 10);
        if (!isNaN(chainId)) {
          files.push({ path: runLatestPath, chainId });
        }
      }
    }
  }

  return files;
}

function extractDeployments(broadcastFile: BroadcastFile): ChainDeployments {
  const deployments: ChainDeployments = {};

  // Find ERC1967Proxy (this is the SafeModuleManager proxy - main contract)
  const proxyTx = broadcastFile.transactions.find(
    tx => tx.contractName === 'ERC1967Proxy'
  );
  if (proxyTx) {
    deployments.SafeModuleManager = proxyTx.contractAddress.toLowerCase();
  }

  // Find ManagedSafeModule implementation
  const moduleTx = broadcastFile.transactions.find(
    tx => tx.contractName === 'ManagedSafeModule'
  );
  if (moduleTx) {
    deployments.ManagedSafeModule = moduleTx.contractAddress.toLowerCase();
  }

  return deployments;
}

function generateDeploymentsFile(deploymentsByChain: Record<number, ChainDeployments>): string {
  const chainEntries = Object.entries(deploymentsByChain)
    .sort(([a], [b]) => parseInt(a) - parseInt(b))
    .map(([chainId, deployments]) => {
      const chainName = getChainName(parseInt(chainId));
      return `  // ${chainName}
  ${chainId}: {
    SafeModuleManager: '${deployments.SafeModuleManager}',
    ManagedSafeModule: '${deployments.ManagedSafeModule}',
  },`;
    })
    .join('\n');

  return `import { Address } from 'viem';

export interface ChainDeployments {
  SafeModuleManager?: Address;
  ManagedSafeModule?: Address;
  OwnerModuleFactory?: Address;
  ControlOwnerModule?: Address;
}

/**
 * Deployment addresses extracted from broadcast files
 * Auto-generated by scripts/update-deployments.ts
 * Last updated: ${new Date().toISOString().split('T')[0]}
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * Run: pnpm update-deployments
 */
const DEPLOYMENT_ADDRESSES: Record<number, ChainDeployments> = {
${chainEntries}
};

/**
 * Get deployment addresses for a specific chain
 */
export function getDeploymentAddresses(chainId: number): ChainDeployments {
  return DEPLOYMENT_ADDRESSES[chainId] || {};
}

/**
 * Get SafeModuleManager address for a chain, with fallback to OwnerModuleFactory
 */
export function getSafeModuleManagerAddress(chainId: number): Address | undefined {
  const addresses = getDeploymentAddresses(chainId);
  return addresses.SafeModuleManager || addresses.OwnerModuleFactory;
}

/**
 * Get ManagedSafeModule template address for a chain, with fallback to ControlOwnerModule
 */
export function getManagedSafeModuleAddress(chainId: number): Address | undefined {
  const addresses = getDeploymentAddresses(chainId);
  return addresses.ManagedSafeModule || addresses.ControlOwnerModule;
}

/**
 * Get block explorer URL for a chain
 */
export function getBlockExplorerUrl(chainId: number): string {
  const explorers: Record<number, string> = {
    1: 'https://etherscan.io',
    100: 'https://gnosisscan.io',
    8453: 'https://basescan.org',
    11155111: 'https://sepolia.etherscan.io',
    84532: 'https://sepolia.basescan.org',
    31337: 'http://localhost:8545',
  };
  return explorers[chainId] || 'https://etherscan.io';
}

/**
 * Contract versions
 */
export const CONTRACT_VERSIONS = {
  SafeModuleManager: 'v2.0.0-uups',
  ManagedSafeModule: 'v2.0.0-uups',
} as const;
`;
}

function getChainName(chainId: number): string {
  const names: Record<number, string> = {
    1: 'Ethereum Mainnet',
    100: 'Gnosis Chain',
    8453: 'Base',
    11155111: 'Sepolia',
    84532: 'Base Sepolia',
    31337: 'Local development',
  };
  return names[chainId] || `Chain ${chainId}`;
}

function main() {
  console.log('üîç Searching for broadcast files...');

  const broadcastFiles = findBroadcastFiles();
  console.log(`üìÅ Found ${broadcastFiles.length} broadcast files`);

  const deploymentsByChain: Record<number, ChainDeployments> = {};

  for (const { path: filePath, chainId } of broadcastFiles) {
    console.log(`\nüìñ Reading ${filePath}`);

    const content = fs.readFileSync(filePath, 'utf-8');
    const broadcast: BroadcastFile = JSON.parse(content);

    const deployments = extractDeployments(broadcast);

    if (deployments.SafeModuleManager || deployments.ManagedSafeModule) {
      deploymentsByChain[chainId] = deployments;

      console.log(`‚úÖ Chain ${chainId} (${getChainName(chainId)}):`);
      if (deployments.SafeModuleManager) {
        console.log(`   SafeModuleManager: ${deployments.SafeModuleManager}`);
      }
      if (deployments.ManagedSafeModule) {
        console.log(`   ManagedSafeModule: ${deployments.ManagedSafeModule}`);
      }
    }
  }

  if (Object.keys(deploymentsByChain).length === 0) {
    console.log('\n‚ö†Ô∏è  No deployments found in broadcast files');
    return;
  }

  console.log(`\nüìù Generating ${OUTPUT_FILE}...`);
  const fileContent = generateDeploymentsFile(deploymentsByChain);
  fs.writeFileSync(OUTPUT_FILE, fileContent, 'utf-8');

  console.log('‚ú® Deployments file updated successfully!');
  console.log(`\nüìä Summary: ${Object.keys(deploymentsByChain).length} chains configured`);
}

main();
